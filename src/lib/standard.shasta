; Arithmetic
add = {|a b| (eval "a + b")} + = add
subtract = {|a b| (eval "a - b")} 
- = subtract
multiply = {|a b| (eval "a * b")} 
* = multiply
divide = {|a b| (eval "a / b")} 
/ = divide
mod = {|a b| (eval "a % b")}
% = mod
pow = {|a b| (eval "a ** b")}
** = pow
decrement = {(- $ 1)}
decr = decrement
-- = decrement
increment = {(+ $ 1)}
incr = increment
++ = increment

; Comparisons
is = {|a b| (eval "a === b")}
not = {(eval "!$")}
! = not
and = {|a b| (eval "a && b")}
or = {|a b| (eval "a || b")}
greater_than = {|2| (eval "$ > $1")}
gt = greater_than
> = greater_than
less_than = {|2| (eval "$ < $1")}
lt = less_than
< = less_than
greater_than_or_equal = {|2| (eval "$ >= $1")}
gte = greater_than_or_equal
>e = greater_than_or_equal
less_than_or_equal = {|2| (eval "$ <= $1")}
lte = less_than_or_equal
<e = less_than_or_equal

apply = {|3| (eval "$.apply($1, $2)")}
call = {|3| (eval "$.call($1, $2)")}
type_of = {(eval "typeof $")}

; Arrays
reduce = {|2| (call Array.prototype.reduce $ $1)}
reduce_right = {|2| (call Array.prototype.reduceRight $ $1)}
is_array = {(Array.isArray)}
in = {|2| (call Array.prototype.includes (to_array))}
dict = {(Object.fromEntries)}
entries = {(Object.entries)}
; each = {|a b| (void (.b a))}
join = {|a b| (a.join b)}
sort = {|2| ($.sort $1)}
all = {($.every {$})}
some = {($.some {$})}
filter = {|2| ($.filter $1)}
map = {|2| ($.map $1)}
push = {|2| ($.push $1)}
pop = {($.pop)}
length = {$.length}
count = {|2| (length (filter $ {|x| (is x $)}))}
slice = {|3| ($.slice $1 $2)}
copy = {(slice $ 0 (length $))}
reverse = {(apply Array.prototype.reverse (copy $) [])}
index_of = {|2| ($.indexOf $1)}
remove = {|2| (call Array.prototype.toSpliced $ $1 1)}

; Math
absolute_value = {(if (> $ 0) then $ else (- 0 $))}
abs = absolute_value
minimum = {(reduce $ {|a b| (if (> a b) then b else a)})}
min = minimum
maximum = {(reduce $ {|a b| (if (< a b) then b else a)})}
max = maximum
range = {|a b| (eval "[...Array(abs(b - a)).keys()].map(i => i + min([a, b]))")}
sum = {(reduce $ +)}
product = {(reduce $ *)}

; Other
set = {|a b c| (eval "a[b] = c")}
get = {|a b| (eval "a[b]")}
print = {(console.log (join $ " "))}
printf = {|2| (eval "console.log($, ...$1)")}

; Strings
split = {|a b| (a.split b)}
re = {|2| (eval "new RegExp($, $1)")}
replace = {|2| (call String.replace $2 $ $1)}
wrap = {|2| (join [$1, $, $1] "")}
